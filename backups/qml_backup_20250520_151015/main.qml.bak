import QtQuick
import QtQuick.Controls
import QtQuick.Window
import QtQuick.Layouts
import QtQuick.Dialogs
import Qt.labs.platform

// Import local components
import mpv 1.0
import "components"
import "panels"
import "controls"
import "popups"
import "utils"

// Import MPV module when MPV support is available
import mpv 1.0

ApplicationWindow {
    id: root
    visible: true
    width: 1280
    height: 720
    minimumWidth: 640
    minimumHeight: 480
    title: qsTr("HYPER-PLAYER")
    color: "#161616"  // Dark theme background
    
    // Global properties
    property bool mpvSupported: hasMpvSupport
    property string currentMediaFile: ""
    property bool settingsPanelVisible: true
    property int currentFrame: 0
    property int totalFrames: 1000
    property real fps: 24.0
    property string currentTimecode: "00:00:00:00"
    property bool magnifierActive: false
    
    // Style constants - professional dark theme like DJV
    readonly property color accentColor: "#0078D7"  // Professional blue
    readonly property color secondaryColor: "#1DB954" // Green accent
    readonly property color textColor: "#FFFFFF"
    readonly property color panelColor: "#252525"
    readonly property color controlBgColor: "#1E1E1E"
    readonly property color darkControlColor: "#181818"
    readonly property color borderColor: "#333333"
    readonly property color sliderBgColor: "#333333"
    readonly property color toolButtonColor: "#2A2A2A"
    readonly property int panelWidth: 260
    
    // Font settings
    readonly property string mainFont: "Segoe UI"
    readonly property string monoFont: "Consolas"
    
    // Icon mapping to ensure proper display
    readonly property var iconMap: ({
        "play_arrow": "‚ñ∂",
        "pause": "‚è∏",
        "skip_previous": "‚èÆ",
        "skip_next": "‚è≠",
        "fast_rewind": "‚è™",
        "fast_forward": "‚è©",
        "chevron_left": "‚óÄ",
        "chevron_right": "‚ñ∂",
        "folder_open": "üìÇ",
        "settings": "‚öô",
        "fullscreen": "‚õ∂",
        "fullscreen_exit": "‚Üô"
    })
    
    // Main content area - need to ensure this fills the space ABOVE the control bar
    Item {
        id: mainContentArea
        anchors.top: parent.top
        anchors.left: parent.left
        anchors.right: parent.right
        // Ensure this stops above bottom control bar
        anchors.bottom: statusBar.top
        
        // Horizontal split between video and settings panel
        SplitView {
            anchors.fill: parent
            orientation: Qt.Horizontal
            handle: Rectangle {
                implicitWidth: 1
                implicitHeight: parent.height
                color: borderColor
            }
            
            // Video area with professional styling
            VideoArea {
                id: videoArea
                SplitView.fillWidth: true
                SplitView.minimumWidth: 400
                
                // Bind properties for synchronization
                currentMediaFile: root.currentMediaFile
                currentFrame: root.currentFrame
                totalFrames: root.totalFrames
                fps: root.fps
                currentTimecode: root.currentTimecode
            }
            
            // Settings panel - professional styling
            Rectangle {
                id: settingsPanel
                color: panelColor
                SplitView.preferredWidth: panelWidth
                visible: settingsPanelVisible
                
                // Settings panel content
                ColumnLayout {
                    anchors.fill: parent
                    anchors.margins: 10
                    spacing: 10
                    
                    // Panel title
                    Text {
                        text: qsTr("Settings")
                        color: textColor
                        font.bold: true
                        font.pixelSize: 16
                        Layout.fillWidth: true
                        font.family: mainFont
                    }
                    
                    // Tab control - professional styling
                    TabBar {
                        id: settingsTabs
                        Layout.fillWidth: true
                        
                        background: Rectangle {
                            color: darkControlColor
                            radius: 2
                            border.color: borderColor
                            border.width: 1
                        }
                        
                        TabButton {
                            text: qsTr("General")
                            font.family: mainFont
                            font.pixelSize: 12
                            
                            background: Rectangle {
                                color: parent.checked ? Qt.rgba(accentColor.r, accentColor.g, accentColor.b, 0.2) : "transparent"
                                border.color: parent.checked ? accentColor : "transparent"
                                border.width: parent.checked ? 1 : 0
                                radius: 0
                            }
                        }
                        TabButton {
                            text: qsTr("Video")
                            font.family: mainFont
                            font.pixelSize: 12
                            
                            background: Rectangle {
                                color: parent.checked ? Qt.rgba(accentColor.r, accentColor.g, accentColor.b, 0.2) : "transparent"
                                border.color: parent.checked ? accentColor : "transparent"
                                border.width: parent.checked ? 1 : 0
                                radius: 0
                            }
                        }
                        TabButton {
                            text: qsTr("Audio")
                            font.family: mainFont
                            font.pixelSize: 12
                            
                            background: Rectangle {
                                color: parent.checked ? Qt.rgba(accentColor.r, accentColor.g, accentColor.b, 0.2) : "transparent"
                                border.color: parent.checked ? accentColor : "transparent"
                                border.width: parent.checked ? 1 : 0
                                radius: 0
                            }
                        }
                        TabButton {
                            text: qsTr("Tools")
                            font.family: mainFont
                            font.pixelSize: 12
                            
                            background: Rectangle {
                                color: parent.checked ? Qt.rgba(accentColor.r, accentColor.g, accentColor.b, 0.2) : "transparent"
                                border.color: parent.checked ? accentColor : "transparent"
                                border.width: parent.checked ? 1 : 0
                                radius: 0
                            }
                        }
                    }
                    
                    // Tab contents
                    StackLayout {
                        currentIndex: settingsTabs.currentIndex
                        Layout.fillWidth: true
                        Layout.fillHeight: true
                        
                        // General settings tab
                        ScrollView {
                            Layout.fillWidth: true
                            Layout.fillHeight: true
                            clip: true
                            
                            ColumnLayout {
                                width: parent.width
                                spacing: 12
                                
                                // ÏùºÎ∞ò ÏÑ§Ï†ï ÌÉ≠
                                GroupBox {
                                    title: qsTr("Playback Info")
                                    Layout.fillWidth: true
                                    
                                    background: Rectangle {
                                        color: Qt.rgba(0.12, 0.12, 0.12, 0.9)
                                        border.color: accentColor
                                        border.width: 1
                                        radius: 6
                                        y: parent.topPadding - parent.bottomPadding
                                        width: parent.width
                                        height: parent.height - parent.topPadding + parent.bottomPadding
                                        
                                        // Í∑∏ÎùºÎç∞Ïù¥ÏÖò Ìö®Í≥º Ï∂îÍ∞Ä
                                        gradient: Gradient {
                                            GradientStop { position: 0.0; color: Qt.rgba(0.14, 0.14, 0.17, 0.9) }
                                            GradientStop { position: 1.0; color: Qt.rgba(0.10, 0.10, 0.13, 0.9) }
                                        }
                                        
                                        // ÏÑπÏÖò ÎùºÏù∏
                                        Rectangle {
                                            height: 2
                                            width: parent.width - 20
                                            color: accentColor
                                            opacity: 0.5
                                            anchors.horizontalCenter: parent.horizontalCenter
                                            anchors.top: parent.top
                                            anchors.topMargin: 32
                                        }
                                    }
                                    
                                    label: Label {
                                        text: parent.title
                                        font.bold: true
                                        font.family: "Segoe UI"
                                        font.pixelSize: 14
                                        color: textColor
                                        topPadding: 8
                                        
                                        // ÏïÑÏù¥ÏΩò Ï∂îÍ∞Ä
                                        Row {
                                            anchors.verticalCenter: parent.verticalCenter
                                            anchors.left: parent.right
                                            anchors.leftMargin: 8
                                            spacing: 5
                                            
                                            Text {
                                                text: "\uf1c8" // ÎπÑÎîîÏò§ ÏïÑÏù¥ÏΩò (FA Ïä§ÌÉÄÏùº)
                                                font.family: "FontAwesome"
                                                font.pixelSize: 14
                                                color: secondaryColor
                                            }
                                        }
                                    }
                                    
                                    GridLayout {
                                        columns: 2
                                        Layout.fillWidth: true
                                        columnSpacing: 12
                                        rowSpacing: 8
                                        
                                        Text {
                                            text: qsTr("Resolution:")
                                            color: textColor
                                            font.family: "Segoe UI"
                                            font.pixelSize: 12
                                        }
                                        Text {
                                            id: resolutionLabel
                                            text: "1920 x 1080"
                                            color: "#FFFFFF"
                                            font.family: "Consolas"
                                            font.pixelSize: 12
                                        }
                                        
                                        Text {
                                            text: qsTr("FPS:")
                                            color: textColor
                                            font.family: "Segoe UI"
                                            font.pixelSize: 12
                                        }
                                        Text {
                                            text: fps.toFixed(3)
                                            color: "#FFFFFF"
                                            font.family: "Consolas"
                                            font.pixelSize: 12
                                        }
                                        
                                        Text {
                                            text: qsTr("Frames:")
                                            color: textColor
                                            font.family: "Segoe UI"
                                            font.pixelSize: 12
                                        }
                                        Text {
                                            id: framesLabel
                                            text: videoArea.mpvPlayer ? videoArea.mpvPlayer.frameCount : "0"
                                            color: "#FFFFFF"
                                            font.family: "Consolas"
                                            font.pixelSize: 12
                                        }
                                        
                                        Text {
                                            text: qsTr("Codec:")
                                            color: textColor
                                            font.family: "Segoe UI"
                                            font.pixelSize: 12
                                        }
                                        Text {
                                            id: codecLabel
                                            text: "H.264"
                                            color: "#FFFFFF"
                                            font.family: "Consolas"
                                            font.pixelSize: 12
                                        }
                                        
                                        Text {
                                            text: qsTr("Pixel Format:")
                                            color: textColor
                                            font.family: "Segoe UI"
                                            font.pixelSize: 12
                                        }
                                        Text {
                                            id: pixelFormatLabel
                                            text: "YUV420P"
                                            color: "#FFFFFF"
                                            font.family: "Consolas"
                                            font.pixelSize: 12
                                        }
                                    }
                                }
                                
                                // ÌîÑÎ†àÏûÑ ÏÑ§Ï†ï ÏÑπÏÖò
                                GroupBox {
                                    title: qsTr("Frame Settings")
                                    Layout.fillWidth: true
                                    
                                    background: Rectangle {
                                        color: Qt.rgba(0.12, 0.12, 0.12, 0.9)
                                        border.color: secondaryColor
                                        border.width: 1
                                        radius: 6
                                        y: parent.topPadding - parent.bottomPadding
                                        width: parent.width
                                        height: parent.height - parent.topPadding + parent.bottomPadding
                                        
                                        // Í∑∏ÎùºÎç∞Ïù¥ÏÖò Ìö®Í≥º Ï∂îÍ∞Ä
                                        gradient: Gradient {
                                            GradientStop { position: 0.0; color: Qt.rgba(0.14, 0.14, 0.17, 0.9) }
                                            GradientStop { position: 1.0; color: Qt.rgba(0.10, 0.10, 0.13, 0.9) }
                                        }
                                        
                                        // ÏÑπÏÖò ÎùºÏù∏
                                        Rectangle {
                                            height: 2
                                            width: parent.width - 20
                                            color: secondaryColor
                                            opacity: 0.5
                                            anchors.horizontalCenter: parent.horizontalCenter
                                            anchors.top: parent.top
                                            anchors.topMargin: 32
                                        }
                                    }
                                    
                                    label: Label {
                                        text: parent.title
                                        font.bold: true
                                        font.family: "Segoe UI"
                                        font.pixelSize: 14
                                        color: textColor
                                        topPadding: 8
                                        
                                        // ÏïÑÏù¥ÏΩò Ï∂îÍ∞Ä
                                        Row {
                                            anchors.verticalCenter: parent.verticalCenter
                                            anchors.left: parent.right
                                            anchors.leftMargin: 8
                                            spacing: 5
                                            
                                            Text {
                                                text: "\uf51f" // ÌîÑÎ†àÏûÑ ÏïÑÏù¥ÏΩò (FA Ïä§ÌÉÄÏùº)
                                                font.family: "FontAwesome"
                                                font.pixelSize: 14
                                                color: secondaryColor
                                            }
                                        }
                                    }
                                    
                                    ColumnLayout {
                                        width: parent.width
                                        spacing: 10
                                        
                                        // ÌîÑÎ†àÏûÑ Î≤àÌò∏ ÏãúÏûë Î∞©Ïãù
                                        Text {
                                            text: qsTr("Frame Numbering")
                                            color: textColor
                                            font.family: "Segoe UI"
                                            font.pixelSize: 13
                                            font.bold: true
                                        }
                                        
                                        RowLayout {
                                            Layout.fillWidth: true
                                            spacing: 10
                                            
                                            RadioButton {
                                                id: zeroBasedBtn
                                                text: qsTr("Zero-based (0 to N-1)")
                                                checked: videoArea.mpvPlayer ? !videoArea.mpvPlayer.oneBasedFrameNumbers : true
                                                
                                                contentItem: Text {
                                                    text: parent.text
                                                    font.pixelSize: 12
                                                    font.family: "Segoe UI"
                                                    color: textColor
                                                    verticalAlignment: Text.AlignVCenter
                                                    leftPadding: parent.indicator.width + parent.spacing
                                                }
                                                
                                                onCheckedChanged: {
                                                    if (checked && videoArea.mpvPlayer) {
                                                        videoArea.mpvPlayer.oneBasedFrameNumbers = false;
                                                    }
                                                }
                                            }
                                            
                                            RadioButton {
                                                id: oneBasedBtn
                                                text: qsTr("One-based (1 to N)")
                                                checked: videoArea.mpvPlayer ? videoArea.mpvPlayer.oneBasedFrameNumbers : false
                                                
                                                contentItem: Text {
                                                    text: parent.text
                                                    font.pixelSize: 12
                                                    font.family: "Segoe UI"
                                                    color: textColor
                                                    verticalAlignment: Text.AlignVCenter
                                                    leftPadding: parent.indicator.width + parent.spacing
                                                }
                                                
                                                onCheckedChanged: {
                                                    if (checked && videoArea.mpvPlayer) {
                                                        videoArea.mpvPlayer.oneBasedFrameNumbers = true;
                                                    }
                                                }
                                            }
                                        }
                                                
                                        // ÌîÑÎ†àÏûÑ Î≤àÌò∏ ÏÑ§Î™Ö
                                        Rectangle {
                                            Layout.fillWidth: true
                                            height: infoText.implicitHeight + 16
                                            color: Qt.rgba(0.1, 0.1, 0.1, 0.7)
                                            radius: 4
                                            
                                            Text {
                                                id: infoText
                                                anchors.fill: parent
                                                anchors.margins: 8
                                                text: qsTr("Zero-based numbering starts from 0, while one-based starts from 1. Choose based on your workflow preference.")
                                                color: "#CCCCCC"
                                                font.pixelSize: 11
                                                font.family: "Segoe UI"
                                                wrapMode: Text.WordWrap
                                            }
                                        }
                                    }
                                }
                                
                                // Ïû¨ÏÉù ÏÜçÎèÑ Ïª®Ìä∏Î°§ - Ìñ•ÏÉÅÎêú ÎîîÏûêÏù∏
                                GroupBox {
                                    title: qsTr("Playback Speed")
                                    Layout.fillWidth: true
                                    
                                    background: Rectangle {
                                        color: Qt.rgba(0.12, 0.12, 0.12, 0.9)
                                        border.color: accentColor
                                        border.width: 1
                                        radius: 6
                                        y: parent.topPadding - parent.bottomPadding
                                        width: parent.width
                                        height: parent.height - parent.topPadding + parent.bottomPadding
                                        
                                        // Í∑∏ÎùºÎç∞Ïù¥ÏÖò Ìö®Í≥º Ï∂îÍ∞Ä
                                        gradient: Gradient {
                                            GradientStop { position: 0.0; color: Qt.rgba(0.14, 0.14, 0.17, 0.9) }
                                            GradientStop { position: 1.0; color: Qt.rgba(0.10, 0.10, 0.13, 0.9) }
                                        }
                                        
                                        // ÏÑπÏÖò ÎùºÏù∏
                                        Rectangle {
                                            height: 2
                                            width: parent.width - 20
                                            color: accentColor
                                            opacity: 0.5
                                            anchors.horizontalCenter: parent.horizontalCenter
                                            anchors.top: parent.top
                                            anchors.topMargin: 32
                                        }
                                    }
                                    
                                    label: Label {
                                        text: parent.title
                                        font.bold: true
                                        font.family: "Segoe UI"
                                        font.pixelSize: 14
                                        color: textColor
                                        topPadding: 8
                                        
                                        // ÏïÑÏù¥ÏΩò Ï∂îÍ∞Ä
                                        Row {
                                            anchors.verticalCenter: parent.verticalCenter
                                            anchors.left: parent.right
                                            anchors.leftMargin: 8
                                            spacing: 5
                                            
                                            Text {
                                                text: "\uf04b" // ÌîåÎ†àÏù¥ ÏïÑÏù¥ÏΩò (FA Ïä§ÌÉÄÏùº)
                                                font.family: "FontAwesome"
                                                font.pixelSize: 14
                                                color: accentColor
                                            }
                                        }
                                    }
                                    
                                    ColumnLayout {
                                        anchors.fill: parent
                                        spacing: 10
                                        
                                        Slider {
                                            id: speedSlider
                                            from: 0.25
                                            to: 4.0
                                            value: 1.0
                                            stepSize: 0.25
                                            Layout.fillWidth: true
                                            
                                            Component.onCompleted: {
                                                if (videoArea.mpvPlayer) {
                                                    // Ï¥àÍ∏∞ ÏÜçÎèÑÎ•º ÏÑ§Ï†ïÌï† ÎïåÎäî Î™ÖÎ†π ÌïòÎÇòÎßå ÏÇ¨Ïö©
                                                    try {
                                                        videoArea.mpvPlayer.command(["set_property", "speed", value]);
                                                    } catch (e) {
                                                        console.error("Speed setting error:", e);
                                                    }
                                                }
                                            }
                                                    
                                                    background: Rectangle {
                                                        x: speedSlider.leftPadding
                                                        y: speedSlider.topPadding + speedSlider.availableHeight / 2 - height / 2
                                                        implicitWidth: 200
                                                        implicitHeight: 4
                                                        width: speedSlider.availableWidth
                                                        height: implicitHeight
                                                        radius: 2
                                                        color: "#444444"
                                                        
                                                        Rectangle {
                                                            width: speedSlider.visualPosition * parent.width
                                                            height: parent.height
                                                            color: secondaryColor
                                                            radius: 2
                                                        }
                                                    }
                                                    
                                                    handle: Rectangle {
                                                        x: speedSlider.leftPadding + speedSlider.visualPosition * (speedSlider.availableWidth - width)
                                                        y: speedSlider.topPadding + speedSlider.availableHeight / 2 - height / 2
                                                        implicitWidth: 16
                                                        implicitHeight: 16
                                                        radius: 8
                                                        color: speedSlider.pressed ? Qt.darker(secondaryColor, 1.2) : secondaryColor
                                                        border.color: "#FFFFFF"
                                                        border.width: 2
                                                        
                                                        // Í∑∏Î¶ºÏûê Ìö®Í≥º
                                                        layer.enabled: true
                                                        layer.effect: DropShadow {
                                                            transparentBorder: true
                                                            horizontalOffset: 1
                                                            verticalOffset: 1
                                                            radius: 3.0
                                                            samples: 7
                                                            color: "#80000000"
                                                        }
                                                    }
                                                    
                                                    onValueChanged: {
                                                        if (videoArea.mpvPlayer) {
                                                            try {
                                                                // ÏÜçÎèÑ ÏÑ§Ï†ïÏùÄ Ìïú Î≤àÎßå ÏàòÌñâ (Í≥ºÎèÑÌïú Î™ÖÎ†π Î∞©ÏßÄ)
                                                                videoArea.mpvPlayer.setProperty("speed", value);
                                                                
                                                                // Ï∂îÍ∞Ä UI Í∞±Ïã†
                                                                qmlGlobalTimer.singleShot(16, root, function() {
                                                                    updateFrameInfo();
                                                                });
                                                            } catch (e) {
                                                                console.error("Speed change error:", e);
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                RowLayout {
                                                    Layout.fillWidth: true
                                                    
                                                    Text {
                                                        text: speedSlider.value.toFixed(2) + "x"
                                                        color: textColor
                                                        font.family: "Consolas"
                                                        font.bold: true
                                                    }
                                                    
                                                    Item { Layout.fillWidth: true }
                                                    
                                                    // ÌîÑÎ¶¨ÏÖã Î≤ÑÌäºÎì§
                                                    Row {
                                                        spacing: 4
                                                        
                                                        Repeater {
                                                            model: [0.5, 1.0, 1.5, 2.0]
                                                            
                                                            Button {
                                                                width: 36
                                                                height: 24
                                                                text: modelData + "x"
                                                                
                                                                background: Rectangle {
                                                                    radius: 4
                                                                    color: speedSlider.value === modelData ? 
                                                                           accentColor : Qt.rgba(0.2, 0.2, 0.2, 0.8)
                                                                    border.color: speedSlider.value === modelData ? 
                                                                                  "white" : Qt.rgba(0.3, 0.3, 0.3, 0.8)
                                                                    border.width: 1
                                                                }
                                                                
                                                                contentItem: Text {
                                                                    text: parent.text
                                                                    font.pixelSize: 10
                                                                    font.bold: true
                                                                    font.family: "Segoe UI"
                                                                    color: speedSlider.value === modelData ? 
                                                                           "white" : "#CCCCCC"
                                                                    horizontalAlignment: Text.AlignHCenter
                                                                    verticalAlignment: Text.AlignVCenter
                                                                }
                                                                
                                                                onClicked: {
                                                                    speedSlider.value = modelData;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    TransparentButton {
                                                        text: qsTr("Reset")
                                                        textColorNormal: "#FFFFFF"
                                                        textColorHover: accentColor
                                                        onClicked: {
                                                            speedSlider.value = 1.0;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        // Î£π Ïû¨ÏÉù ÏÑ§Ï†ï - Ìñ•ÏÉÅÎêú ÎîîÏûêÏù∏
                                        GroupBox {
                                            title: qsTr("Playback Options")
                                            Layout.fillWidth: true
                                            
                                            background: Rectangle {
                                                color: Qt.rgba(0.12, 0.12, 0.12, 0.9)
                                                border.color: secondaryColor
                                                border.width: 1
                                                radius: 6
                                                y: parent.topPadding - parent.bottomPadding
                                                width: parent.width
                                                height: parent.height - parent.topPadding + parent.bottomPadding
                                                
                                                // Í∑∏ÎùºÎç∞Ïù¥ÏÖò Ìö®Í≥º Ï∂îÍ∞Ä
                                                gradient: Gradient {
                                                    GradientStop { position: 0.0; color: Qt.rgba(0.14, 0.14, 0.17, 0.9) }
                                                    GradientStop { position: 1.0; color: Qt.rgba(0.10, 0.10, 0.13, 0.9) }
                                                }
                                                
                                                // ÏÑπÏÖò ÎùºÏù∏
                                                Rectangle {
                                                    height: 2
                                                    width: parent.width - 20
                                                    color: secondaryColor
                                                    opacity: 0.5
                                                    anchors.horizontalCenter: parent.horizontalCenter
                                                    anchors.top: parent.top
                                                    anchors.topMargin: 32
                                                }
                                            }
                                            
                                            label: Label {
                                                text: parent.title
                                                font.bold: true
                                                font.family: "Segoe UI"
                                                font.pixelSize: 14
                                                color: textColor
                                                topPadding: 8
                                                
                                                // ÏïÑÏù¥ÏΩò Ï∂îÍ∞Ä
                                                Row {
                                                    anchors.verticalCenter: parent.verticalCenter
                                                    anchors.left: parent.right
                                                    anchors.leftMargin: 8
                                                    spacing: 5
                                                    
                                                    Text {
                                                        text: "\uf1de" // ÏÑ§Ï†ï ÏïÑÏù¥ÏΩò (FA Ïä§ÌÉÄÏùº)
                                                        font.family: "FontAwesome"
                                                        font.pixelSize: 14
                                                        color: secondaryColor
                                                    }
                                                }
                                            }
                                            
                                            ColumnLayout {
                                                width: parent.width
                                                spacing: 10
                                                
                                                CheckBox {
                                                    text: qsTr("Loop Playback")
                                                    checked: false
                                                    Layout.fillWidth: true
                                                    
                                                    contentItem: Text {
                                                        text: parent.text
                                                        font.pixelSize: 13
                                                        font.family: "Segoe UI"
                                                        color: textColor
                                                        verticalAlignment: Text.AlignVCenter
                                                        leftPadding: parent.indicator.width + parent.spacing
                                                    }
                                                    
                                                    onCheckedChanged: {
                                                        if (videoArea.mpvPlayer) {
                                                            videoArea.mpvPlayer.loop = checked;
                                                        }
                                                    }
                                                }
                                                
                                                CheckBox {
                                                    text: qsTr("Auto-Pause at Last Frame")
                                                    checked: true
                                                    Layout.fillWidth: true
                                                    enabled: false // Ìï≠ÏÉÅ ÌôúÏÑ±ÌôîÎê®
                                                    
                                                    contentItem: Text {
                                                        text: parent.text
                                                        font.pixelSize: 13
                                                        font.family: "Segoe UI"
                                                        color: textColor
                                                        verticalAlignment: Text.AlignVCenter
                                                        leftPadding: parent.indicator.width + parent.spacing
                                                    }
                                                }
                                                
                                                CheckBox {
                                                    id: autoPlayCheck
                                                    text: qsTr("Auto-Play on Load")
                                                    checked: false
                                                    Layout.fillWidth: true
                                                    
                                                    contentItem: Text {
                                                        text: parent.text
                                                        font.pixelSize: 13
                                                        font.family: "Segoe UI"
                                                        color: textColor
                                                        verticalAlignment: Text.AlignVCenter
                                                        leftPadding: parent.indicator.width + parent.spacing
                                                    }
                                                }
                                            }
                                        }
                                        
                                        Item { Layout.fillHeight: true }
                                    }
                                }
                            }
                        }
                        
                        // Video settings tab
                        ScrollView {
                            Layout.fillWidth: true
                            Layout.fillHeight: true
                            clip: true
                            
                            ColumnLayout {
                                width: parent.width
                                spacing: 12
                                
                                GroupBox {
                                    title: qsTr("Color Adjustment")
                                    Layout.fillWidth: true
                                    
                                    background: Rectangle {
                                        color: Qt.darker(panelColor, 1.1)
                                        border.color: borderColor
                                        border.width: 1
                                        radius: 4
                                        y: parent.topPadding - parent.bottomPadding
                                        width: parent.width
                                        height: parent.height - parent.topPadding + parent.bottomPadding
                                    }
                                    
                                    label: Label {
                                        text: parent.title
                                        font.bold: true
                                        font.family: "Segoe UI"
                                        font.pixelSize: 13
                                        color: textColor
                                        topPadding: 8
                                    }
                                    
                                    GridLayout {
                                        columns: 2
                                        Layout.fillWidth: true
                                        rowSpacing: 10
                                        
                                        Text {
                                            text: qsTr("Brightness:")
                                            color: textColor
                                            font.family: "Segoe UI"
                                        }
                                        Slider {
                                            id: brightnessSlider
                                            from: -100
                                            to: 100
                                            value: 0
                                            Layout.fillWidth: true
                                            
                                            background: Rectangle {
                                                x: brightnessSlider.leftPadding
                                                y: brightnessSlider.topPadding + brightnessSlider.availableHeight / 2 - height / 2
                                                implicitWidth: 200
                                                implicitHeight: 3
                                                width: brightnessSlider.availableWidth
                                                height: implicitHeight
                                                radius: 1.5
                                                color: "#444444"
                                                
                                                Rectangle {
                                                    property real visualPos: 0.5 + (brightnessSlider.value / (brightnessSlider.to - brightnessSlider.from)) * 0.5
                                                    width: visualPos * parent.width
                                                    height: parent.height
                                                    color: accentColor
                                                    radius: 1.5
                                                }
                                            }
                                            
                                            handle: Rectangle {
                                                x: brightnessSlider.leftPadding + brightnessSlider.visualPosition * (brightnessSlider.availableWidth - width)
                                                y: brightnessSlider.topPadding + brightnessSlider.availableHeight / 2 - height / 2
                                                implicitWidth: 14
                                                implicitHeight: 14
                                                radius: 7
                                                color: brightnessSlider.pressed ? Qt.darker(accentColor, 1.1) : accentColor
                                                border.color: "#FFFFFF"
                                                border.width: 2
                                            }
                                            
                                            onValueChanged: {
                                                if (videoArea.mpvPlayer) {
                                                    videoArea.mpvPlayer.setProperty("brightness", value);
                                                }
                                            }
                                        }
                                        
                                        Text {
                                            text: qsTr("Contrast:")
                                            color: textColor
                                            font.family: "Segoe UI"
                                        }
                                        Slider {
                                            id: contrastSlider
                                            from: -100
                                            to: 100
                                            value: 0
                                            Layout.fillWidth: true
                                            
                                            background: Rectangle {
                                                x: contrastSlider.leftPadding
                                                y: contrastSlider.topPadding + contrastSlider.availableHeight / 2 - height / 2
                                                implicitWidth: 200
                                                implicitHeight: 3
                                                width: contrastSlider.availableWidth
                                                height: implicitHeight
                                                radius: 1.5
                                                color: "#444444"
                                                
                                                Rectangle {
                                                    property real visualPos: 0.5 + (contrastSlider.value / (contrastSlider.to - contrastSlider.from)) * 0.5
                                                    width: visualPos * parent.width
                                                    height: parent.height
                                                    color: accentColor
                                                    radius: 1.5
                                                }
                                            }
                                            
                                            handle: Rectangle {
                                                x: contrastSlider.leftPadding + contrastSlider.visualPosition * (contrastSlider.availableWidth - width)
                                                y: contrastSlider.topPadding + contrastSlider.availableHeight / 2 - height / 2
                                                implicitWidth: 14
                                                implicitHeight: 14
                                                radius: 7
                                                color: contrastSlider.pressed ? Qt.darker(accentColor, 1.1) : accentColor
                                                border.color: "#FFFFFF"
                                                border.width: 2
                                            }
                                            
                                            onValueChanged: {
                                                if (videoArea.mpvPlayer) {
                                                    videoArea.mpvPlayer.setProperty("contrast", value);
                                                }
                                            }
                                        }
                                        
                                        Text {
                                            text: qsTr("Saturation:")
                                            color: textColor
                                            font.family: "Segoe UI"
                                        }
                                        Slider {
                                            id: saturationSlider
                                            from: -100
                                            to: 100
                                            value: 0
                                            Layout.fillWidth: true
                                            
                                            background: Rectangle {
                                                x: saturationSlider.leftPadding
                                                y: saturationSlider.topPadding + saturationSlider.availableHeight / 2 - height / 2
                                                implicitWidth: 200
                                                implicitHeight: 3
                                                width: saturationSlider.availableWidth
                                                height: implicitHeight
                                                radius: 1.5
                                                color: "#444444"
                                                
                                                Rectangle {
                                                    property real visualPos: 0.5 + (saturationSlider.value / (saturationSlider.to - saturationSlider.from)) * 0.5
                                                    width: visualPos * parent.width
                                                    height: parent.height
                                                    color: accentColor
                                                    radius: 1.5
                                                }
                                            }
                                            
                                            handle: Rectangle {
                                                x: saturationSlider.leftPadding + saturationSlider.visualPosition * (saturationSlider.availableWidth - width)
                                                y: saturationSlider.topPadding + saturationSlider.availableHeight / 2 - height / 2
                                                implicitWidth: 14
                                                implicitHeight: 14
                                                radius: 7
                                                color: saturationSlider.pressed ? Qt.darker(accentColor, 1.1) : accentColor
                                                border.color: "#FFFFFF"
                                                border.width: 2
                                            }
                                            
                                            onValueChanged: {
                                                if (videoArea.mpvPlayer) {
                                                    videoArea.mpvPlayer.setProperty("saturation", value);
                                                }
                                            }
                                        }
                                        
                                        Text {
                                            text: qsTr("Gamma:")
                                            color: textColor
                                            font.family: "Segoe UI"
                                        }
                                        Slider {
                                            id: gammaSlider
                                            from: -100
                                            to: 100
                                            value: 0
                                            Layout.fillWidth: true
                                            
                                            background: Rectangle {
                                                x: gammaSlider.leftPadding
                                                y: gammaSlider.topPadding + gammaSlider.availableHeight / 2 - height / 2
                                                implicitWidth: 200
                                                implicitHeight: 3
                                                width: gammaSlider.availableWidth
                                                height: implicitHeight
                                                radius: 1.5
                                                color: "#444444"
                                                
                                                Rectangle {
                                                    property real visualPos: 0.5 + (gammaSlider.value / (gammaSlider.to - gammaSlider.from)) * 0.5
                                                    width: visualPos * parent.width
                                                    height: parent.height
                                                    color: accentColor
                                                    radius: 1.5
                                                }
                                            }
                                            
                                            handle: Rectangle {
                                                x: gammaSlider.leftPadding + gammaSlider.visualPosition * (gammaSlider.availableWidth - width)
                                                y: gammaSlider.topPadding + gammaSlider.availableHeight / 2 - height / 2
                                                implicitWidth: 14
                                                implicitHeight: 14
                                                radius: 7
                                                color: gammaSlider.pressed ? Qt.darker(accentColor, 1.1) : accentColor
                                                border.color: "#FFFFFF"
                                                border.width: 2
                                            }
                                            
                                            onValueChanged: {
                                                if (videoArea.mpvPlayer) {
                                                    videoArea.mpvPlayer.setProperty("gamma", value);
                                                }
                                            }
                                        }
                                        
                                        Button {
                                            text: qsTr("Reset")
                                            Layout.columnSpan: 2
                                            Layout.alignment: Qt.AlignHCenter
                                            
                                            contentItem: Text {
                                                text: parent.text
                                                font.pixelSize: 12
                                                font.family: "Segoe UI"
                                                color: "#FFFFFF"
                                                horizontalAlignment: Text.AlignHCenter
                                                verticalAlignment: Text.AlignVCenter
                                            }
                                            
                                            background: Rectangle {
                                                radius: 4
                                                color: parent.down ? Qt.darker("#444444", 1.2) : 
                                                      parent.hovered ? Qt.lighter("#444444", 1.1) : "#444444"
                                            }
                                            
                                            onClicked: {
                                                brightnessSlider.value = 0;
                                                contrastSlider.value = 0;
                                                saturationSlider.value = 0;
                                                gammaSlider.value = 0;
                                            }
                                        }
                                    }
                                }
                                
                                // Video rendering settings
                                GroupBox {
                                    title: qsTr("Rendering Settings")
                                    Layout.fillWidth: true
                                    
                                    background: Rectangle {
                                        color: Qt.darker(panelColor, 1.1)
                                        border.color: borderColor
                                        border.width: 1
                                        radius: 4
                                        y: parent.topPadding - parent.bottomPadding
                                        width: parent.width
                                        height: parent.height - parent.topPadding + parent.bottomPadding
                                    }
                                    
                                    label: Label {
                                        text: parent.title
                                        font.bold: true
                                        font.family: "Segoe UI"
                                        font.pixelSize: 13
                                        color: textColor
                                        topPadding: 8
                                    }
                                    
                                    ColumnLayout {
                                        Layout.fillWidth: true
                                        
                                        Text {
                                            text: qsTr("Scaling Algorithm:")
                                            color: textColor
                                            font.family: "Segoe UI"
                                            font.pixelSize: 13
                                        }
                                        
                                        ComboBox {
                                            id: scalingCombo
                                            model: ["Bilinear", "Spline", "Lanczos", "Bicubic"]
                                            Layout.fillWidth: true
                                            
                                            delegate: ItemDelegate {
                                                width: scalingCombo.width
                                                contentItem: Text {
                                                    text: modelData
                                                    color: textColor
                                                    font.pixelSize: 12
                                                    font.family: "Segoe UI"
                                                    elide: Text.ElideRight
                                                    verticalAlignment: Text.AlignVCenter
                                                }
                                                highlighted: scalingCombo.highlightedIndex === index
                                                
                                                background: Rectangle {
                                                    color: highlighted ? Qt.rgba(accentColor.r, accentColor.g, accentColor.b, 0.2) : "transparent"
                                                }
                                            }
                                            
                                            indicator: Canvas {
                                                id: canvas
                                                x: scalingCombo.width - width - 5
                                                y: scalingCombo.height / 2 - height / 2
                                                width: 12
                                                height: 8
                                                contextType: "2d"
                                                
                                                onPaint: {
                                                    context.reset();
                                                    context.moveTo(0, 0);
                                                    context.lineTo(width, 0);
                                                    context.lineTo(width / 2, height);
                                                    context.closePath();
                                                    context.fillStyle = accentColor;
                                                    context.fill();
                                                }
                                            }
                                            
                                            contentItem: Text {
                                                leftPadding: 8
                                                rightPadding: scalingCombo.indicator.width + 8
                                                
                                                text: scalingCombo.displayText
                                                font: scalingCombo.font
                                                color: textColor
                                                verticalAlignment: Text.AlignVCenter
                                                elide: Text.ElideRight
                                            }
                                            
                                            background: Rectangle {
                                                implicitWidth: 120
                                                implicitHeight: 30
                                                border.color: scalingCombo.pressed ? accentColor : borderColor
                                                border.width: scalingCombo.visualFocus ? 2 : 1
                                                radius: 4
                                                color: scalingCombo.pressed ? Qt.darker(controlBgColor, 1.1) : controlBgColor
                                            }
                                            
                                            popup: Popup {
                                                y: scalingCombo.height - 1
                                                width: scalingCombo.width
                                                implicitHeight: contentItem.implicitHeight
                                                padding: 1
                                                
                                                contentItem: ListView {
                                                    clip: true
                                                    implicitHeight: contentHeight
                                                    model: scalingCombo.popup.visible ? scalingCombo.delegateModel : null
                                                    currentIndex: scalingCombo.highlightedIndex
                                                    
                                                    ScrollIndicator.vertical: ScrollIndicator { }
                                                }
                                                
                                                background: Rectangle {
                                                    border.color: borderColor
                                                    border.width: 1
                                                    radius: 4
                                                    color: panelColor
                                                }
                                            }
                                            
                                            onCurrentTextChanged: {
                                                if (videoArea.mpvPlayer) {
                                                    videoArea.mpvPlayer.setProperty("scale", currentText.toLowerCase());
                                                }
                                            }
                                        }
                                        
                                        // Add spacing
                                        Item { height: 8; Layout.fillWidth: true }
                                        
                                        CheckBox {
                                            text: qsTr("Use Hardware Acceleration")
                                            checked: true
                                            
                                            contentItem: Text {
                                                text: parent.text
                                                font.pixelSize: 13
                                                font.family: "Segoe UI"
                                                color: textColor
                                                verticalAlignment: Text.AlignVCenter
                                                leftPadding: parent.indicator.width + parent.spacing
                                            }
                                            
                                            onCheckedChanged: {
                                                if (videoArea.mpvPlayer && !checked) {
                                                    videoArea.mpvPlayer.setProperty("hwdec", "no");
                                                } else if (videoArea.mpvPlayer) {
                                                    videoArea.mpvPlayer.setProperty("hwdec", "auto");
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                Item { Layout.fillHeight: true }
                            }
                        }
                    }
                }
            }
        }
    }
    
    // Status bar - between the main content and the control bar
    StatusBar {
        id: statusBar
        anchors.left: parent.left
        anchors.right: parent.right
        anchors.bottom: bottomControlBar.top
        visible: videoArea.mpvPlayer && videoArea.mpvPlayer.filename !== ""
        currentMediaFile: root.currentMediaFile
        currentFrame: root.currentFrame
        totalFrames: root.totalFrames
        mainFont: root.mainFont
        monoFont: root.monoFont
        borderColor: root.borderColor
        darkControlColor: root.darkControlColor
    }
    
    // Bottom control bar - professional style like DJV
    ControlBar {
        id: bottomControlBar
        anchors.left: parent.left
        anchors.right: parent.right
        anchors.bottom: parent.bottom
        
        // Bind properties and connect signals
        mpvObject: videoArea.mpvPlayer
        currentFrame: root.currentFrame
        totalFrames: root.totalFrames
        fps: root.fps
        mpvSupported: root.mpvSupported
        
        onOpenFileRequested: fileDialog.open()
        onToggleSettingsPanelRequested: settingsPanelVisible = !settingsPanelVisible
        onToggleFullscreenRequested: {
            if (root.visibility === Window.FullScreen) {
                root.showNormal();
            } else {
                root.showFullScreen();
            }
        }
        onTakeScreenshotRequested: {
            if (videoArea.mpvPlayer) {
                videoArea.mpvPlayer.command(["screenshot"]);
            }
        }
        onFrameBackwardRequested: (frames) => {
            goBackFrames(frames);
        }
        onFrameForwardRequested: (frames) => {
            goForwardFrames(frames);
        }
    }
    
    // File dialog
    FileDialog {
        id: fileDialog
        title: "Select Video File"
        nameFilters: ["Video files (*.mp4 *.avi *.mkv *.mov *.wmv *.webm)"]
        
        onAccepted: {
            console.log("Selected file:", fileDialog.file);
            playMedia(fileDialog.file);
        }
    }
    
    // Color picker dialog - styled professionally like in DJV
    Popup {
        id: colorPickerDialog
        modal: true
        closePolicy: Popup.CloseOnEscape | Popup.CloseOnPressOutside
        anchors.centerIn: parent
        width: 300
        height: 300
        
        contentItem: Rectangle {
            implicitWidth: 300
            implicitHeight: 300
            color: controlBgColor
            border.color: borderColor
            border.width: 1
            
            // Title bar
            Rectangle {
                id: colorPickerTitleBar
                height: 24
                color: darkControlColor
                anchors.top: parent.top
                anchors.left: parent.left
                anchors.right: parent.right
                
                Text {
                    text: "Color Picker"
                    color: textColor
                    font.pixelSize: 12
                    font.family: mainFont
                    anchors.verticalCenter: parent.verticalCenter
                    anchors.left: parent.left
                    anchors.leftMargin: 8
                }
                
                // Close button
                Rectangle {
                    width: 20
                    height: 20
                    radius: 2
                    color: "transparent"
                    anchors.right: parent.right
                    anchors.rightMargin: 2
                    anchors.verticalCenter: parent.verticalCenter
                    
                    Text {
                        text: "‚úï"
                        anchors.centerIn: parent
                        color: textColor
                        font.pixelSize: 12
                    }
                    
                    MouseArea {
                        anchors.fill: parent
                        onClicked: colorPickerDialog.close()
                        hoverEnabled: true
                        onEntered: parent.color = Qt.rgba(1, 1, 1, 0.1)
                        onExited: parent.color = "transparent"
                    }
                }
            }
            
            ColumnLayout {
                anchors.fill: parent
                anchors.margins: 10
                anchors.topMargin: colorPickerTitleBar.height + 6
                
                Rectangle {
                    Layout.fillWidth: true
                    Layout.fillHeight: true
                    color: "black" // Color picker area
                    border.color: borderColor
                    border.width: 1
                }
                
                GridLayout {
                    columns: 2
                    Layout.fillWidth: true
                    rowSpacing: 4
                    columnSpacing: 10
                    
                    Text { text: "R:"; color: textColor; font.family: mainFont }
                    Text { text: "255"; color: textColor; font.family: monoFont }
                    
                    Text { text: "G:"; color: textColor; font.family: mainFont }
                    Text { text: "255"; color: textColor; font.family: monoFont }
                    
                    Text { text: "B:"; color: textColor; font.family: mainFont }
                    Text { text: "255"; color: textColor; font.family: monoFont }
                    
                    Text { text: "A:"; color: textColor; font.family: mainFont }
                    Text { text: "1.0"; color: textColor; font.family: monoFont }
                }
            }
        }
    }
    
    // Magnifier tool - styled professionally like in DJV
    MagnifierTool {
        id: magnifierTool
        visible: magnifierActive
        
        // Position
        x: (parent.width - width) / 2
        y: (parent.height - height) / 2
    }
    
    // Component initialization
    Component.onCompleted: {
        updateFrameInfo();
    }
    
    // Keyboard shortcuts
    Item {
        focus: true
        Keys.onPressed: function(event) {
            if (mpvSupported && videoArea.mpvPlayer) {
                if (event.key === Qt.Key_Space) {
                    videoArea.mpvPlayer.playPause();
                    event.accepted = true;
                } else if (event.key === Qt.Key_Escape) {
                    if (root.visibility === Window.FullScreen) {
                        root.showNormal();
                    } else {
                        Qt.quit();
                    }
                    event.accepted = true;
                } else if (event.key === Qt.Key_F) {
                    if (root.visibility === Window.FullScreen) {
                        root.showNormal();
                    } else {
                        root.showFullScreen();
                    }
                    event.accepted = true;
                } else if (event.key === Qt.Key_Left) {
                    goBackFrames(1);
                    event.accepted = true;
                } else if (event.key === Qt.Key_Right) {
                    goForwardFrames(1);
                    event.accepted = true;
                }
            }
        }
    }
    
    // Media playback functions
    function playMedia(filePath) {
        if (!mpvSupported || !videoArea.mpvPlayer) return;
        
        // Normalize file path (remove file:///)
        let normalizedPath = filePath.toString();
        if (normalizedPath.startsWith("file:///")) {
            normalizedPath = normalizedPath.slice(8); // For Windows file:///C:/ -> C:/
        }
        
        currentMediaFile = normalizedPath;
        videoArea.mpvPlayer.command(["loadfile", normalizedPath]);
        
        // Play then pause to show first frame
        videoArea.mpvPlayer.play();
        playPauseTimer.restart();
    }
    
    // Media load timer
    Timer {
        id: playPauseTimer
        interval: 100
        repeat: false
        onTriggered: {
            if (videoArea.mpvPlayer) {
                videoArea.mpvPlayer.pause();
                updateFrameInfo();
            }
        }
    }
    
    // Frame info update function
    function updateFrameInfo() {
        try {
            // Media not loaded
            if (!videoArea.mpvPlayer || !videoArea.mpvPlayer.filename || videoArea.mpvPlayer.filename === "") {
                return;
            }
            
            // MPV duration check
            try {
                var duration = videoArea.mpvPlayer.duration;
                if (typeof duration === 'undefined' || duration <= 0) {
                    return;
                }
            } catch (e) {
                console.error("Duration check error:", e);
                return;
            }
            
            // FPS initialization
            if (!fps || fps <= 0) {
                try {
                    var estimatedFps = videoArea.mpvPlayer.getProperty("estimated-vf-fps");
                    if (estimatedFps !== undefined && estimatedFps > 0) {
                        fps = parseFloat(estimatedFps.toFixed(3));
                    } else {
                        fps = 24.0;
                    }
                    console.log("FPS initialized to:", fps);
                } catch (e) {
                    console.error("FPS check error:", e);
                    fps = 24.0;
                }
            }
            
            // Total frames calculation
            if (totalFrames <= 1 || Math.abs(totalFrames - Math.ceil(videoArea.mpvPlayer.duration * fps)) > fps) {
                totalFrames = Math.max(10, Math.ceil(videoArea.mpvPlayer.duration * fps));
                console.log("Total frames calculated:", totalFrames);
            }
            
            // Position information
            var pos = 0;
            try {
                var directPos = videoArea.mpvPlayer.getProperty("time-pos");
                
                if (directPos !== undefined && directPos !== null && directPos >= 0) {
                    pos = directPos;
                } else if (typeof videoArea.mpvPlayer.position !== 'undefined' && videoArea.mpvPlayer.position >= 0) {
                    pos = videoArea.mpvPlayer.position;
                } else if (typeof videoArea.mpvPlayer.lastPosition !== 'undefined' && videoArea.mpvPlayer.lastPosition >= 0) {
                    pos = videoArea.mpvPlayer.lastPosition;
                }
            } catch (e) {
                console.error("Position check error:", e);
                if (typeof videoArea.mpvPlayer.lastPosition !== 'undefined') {
                    pos = videoArea.mpvPlayer.lastPosition;
                } else {
                    pos = 0;
                }
            }
            
            // End of media check
            if (pos >= videoArea.mpvPlayer.duration - 0.2) {
                pos = Math.max(0, videoArea.mpvPlayer.duration - 0.5);
                
                if (!videoArea.mpvPlayer.pause) {
                    videoArea.mpvPlayer.command(["set_property", "pause", "yes"]);
                }
            }
            
            // Frame calculation
            var newFrame = Math.min(totalFrames - 1, Math.max(0, Math.round(pos * fps)));
            
            if (currentFrame !== newFrame) {
                currentFrame = newFrame;
            }
            
            // Timecode formatting
            var hours = Math.floor(pos / 3600);
            var minutes = Math.floor((pos % 3600) / 60);
            var seconds = Math.floor(pos % 60);
            var frames = Math.floor((pos * fps) % fps);
            
            currentTimecode = 
                hours.toString().padStart(2, '0') + ":" +
                minutes.toString().padStart(2, '0') + ":" +
                seconds.toString().padStart(2, '0') + ":" +
                frames.toString().padStart(2, '0');
            
        } catch (e) {
            console.error("Frame info update general error:", e);
        }
    }
    
    // Frame navigation functions
    function goBackFrames(numFrames) {
        try {
            if (!videoArea.mpvPlayer) return;
            
            var pos = videoArea.mpvPlayer.position;
            var newPos = Math.max(0, pos - (numFrames / fps));
            
            videoArea.mpvPlayer.setProperty("pause", true);
            videoArea.mpvPlayer.command(["seek", newPos - pos, "relative", "keyframes"]);
            
            // Update after seeking
            frameUpdateTimer.restart();
        } catch (e) {
            console.error("Frame back error:", e);
        }
    }
    
    function goForwardFrames(numFrames) {
        try {
            if (!videoArea.mpvPlayer) return;
            
            var pos = videoArea.mpvPlayer.position;
            var duration = videoArea.mpvPlayer.duration || 0;
            
            var newPos = Math.min(duration - 0.5, pos + (numFrames / fps)); 
            
            videoArea.mpvPlayer.setProperty("pause", true);
            
            var isTooCloseToEnd = (duration - newPos) < 0.5;
            if (isTooCloseToEnd) {
                videoArea.mpvPlayer.command(["seek", Math.max(0, duration - 0.5), "absolute", "keyframes"]);
            } else {
                videoArea.mpvPlayer.command(["seek", newPos - pos, "relative", "keyframes"]);
            }
            
            // Update after seeking
            frameUpdateTimer.restart();
        } catch (e) {
            console.error("Frame forward error:", e);
        }
    }
    
    // Frame update timer
    Timer {
        id: frameUpdateTimer
        interval: 16
        repeat: false
        onTriggered: {
            try {
                updateFrameInfo();
            } catch (e) {
                console.error("Frame update error:", e);
            }
        }
    }
    
    // Global timer for position updates
    Timer {
        id: qmlGlobalTimer
        interval: 33
        running: videoArea.mpvPlayer && videoArea.mpvPlayer.filename !== ""
        repeat: true
        onTriggered: {
            try {
                if (videoArea.mpvPlayer && videoArea.mpvPlayer.filename && videoArea.mpvPlayer.filename !== "") {
                    updateFrameInfo();
                }
            } catch (e) {
                console.error("Position update error:", e);
            }
        }
    }
} 
